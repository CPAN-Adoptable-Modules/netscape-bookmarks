.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Netscape::Bookmarks 3"
.TH Netscape::Bookmarks 3 "2014-10-08" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Netscape::Bookmarks	\- parse, manipulate, or create Netscape Bookmarks files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Netscape::Bookmarks;
\&
\&  # parse an existing file
\&  my $bookmarks = Netscape::Bookmarks\->new( $bookmarks_file );
\&
\&  # \-\- OR \-\-
\&  # start a new Bookmarks structure
\&  my $bookmarks = Netscape::Bookmarks\->new;
\&
\&  # print a Netscape compatible file
\&  print $bookmarks\->as_string;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Netscape bookmarks file has several basic components:
.PP
.Vb 5
\&        title
\&        folders (henceforth called categories)
\&        links
\&        aliases
\&        separators
.Ve
.PP
On disk, Netscape browsers store this information in \s-1HTML.\s0
In the browser, it is displayed under the \*(L"Bookmarks\*(R" menu.
The data can be manipulated through the browser interface.
.PP
This module allows one to manipulate the bookmarks file
programmatically.  One can parse an existing bookmarks file,
manipulate the information, and write it as a bookmarks file
again.  Furthermore, one can skip the parsing step to create
a new bookmarks file and write it in the proper format to be
used by a Netscape browser.
.PP
The Bookmarks module simply parses the bookmarks file passed
to it as the only argument to the constructor:
.PP
.Vb 1
\&        my $bookmarks = Netscape::Bookmarks\->new( $bookmarks_file );
.Ve
.PP
The returned object is a \f(CW\*(C`Netscape::Bookmarks::Category\*(C'\fR object, since
the bookmark file is simply a collection of categories that
contain any of the components listed above.  The top level
(i.e. root) category is treated specially and defines the
title of the bookmarks file.
.PP
\&\f(CW\*(C`HTML::Parser\*(C'\fR is used behind the scenes to build the data structure (a
simple list of lists (of lists ...)). \f(CW\*(C`Netscape::Bookmarks::Category\*(C'\fR,
\&\f(CW\*(C`Netscape::Bookmarks::Link\*(C'\fR, \f(CW\*(C`Netscape::Bookmarks::Alias\*(C'\fR, or
\&\f(CW\*(C`Netscape::Bookmarks::Separator\*(C'\fR objects can be stored in a
\&\f(CW\*(C`Netscape::Bookmarks::Category\*(C'\fR object.  \f(CW\*(C`Netscape::Bookmarks::Alias\*(C'\fR
objects are treated as references to \f(CW\*(C`Netscape::Bookmarks::Link\*(C'\fR
objects, so changes to one affect the other.
.PP
Methods for manipulating this object are in the
\&\f(CW\*(C`Netscape::Bookmarks::Category\*(C'\fR module.  Methods for dealing with the
objects contained in a \f(CW\*(C`Netscape::Bookmarks::Category\*(C'\fR object are in
their appropriate modules.
.IP "new( [filename] )" 4
.IX Item "new( [filename] )"
The constructor takes a filename as its single (optional) argument.
If you do not give \f(CW\*(C`new\*(C'\fR an argument, an empty
\&\f(CW\*(C`Netscape::Bookmarks::Category\*(C'\fR object is returned so that
you can start to build up your new Bookmarks file.  If the file
that you name does not exist, \f(CW\*(C`undef\*(C'\fR is returned in scalar
context and an empty list is returned in list context. If the
file does exist it is parsed with \f(CW\*(C`HTML::Parser\*(C'\fR with the
internal parser subclass defined in the same package as \f(CW\*(C`new\*(C'\fR.
If the parsing finishes without error a \f(CW\*(C`Netscape::Bookmarks::Category\*(C'\fR
object is returned.
.SH "AUTHOR"
.IX Header "AUTHOR"
brian d foy \f(CW\*(C`<bdfoy@cpan.org>\*(C'\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2002\-2014, brian d foy, All rights reserved
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTML::Parser,
Netscape::Bookmarks::Category,
Netscape::Bookmarks::Link,
Netscape::Bookmarks::Alias,
Netscape::Bookmarks::Separator.
