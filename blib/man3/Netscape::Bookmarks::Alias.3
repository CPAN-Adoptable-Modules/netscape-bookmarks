.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Netscape::Bookmarks::Alias 3"
.TH Netscape::Bookmarks::Alias 3 "2014-10-08" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Netscape::Bookmarks::Alias \- object for an Alias in a Netscape Bookmarks file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use Netscape::Bookmarks;
\&        use Netscape::Bookmarks::Alias;
\&
\&        my $bookmarks = Netscape::Bookmarks\->new();
\&
\&        my $alias = Netscape::Bookmarks::Alias\->new();
\&
\&        $bookmarks\->add( $alias );
\&        # ... and other Netscape::Bookmark::Category methods
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides an abstraction for an Alias object in a Netscape
Bookmarks file. An alias is simply a reference to another link in the
Bookmarks file, henceforth called the target. If you change the alias,
the target link also changes.
.ie n .IP "$obj = Netscape::Bookmarks::Alias\->new( \s-1ALIASID \s0)" 4
.el .IP "\f(CW$obj\fR = Netscape::Bookmarks::Alias\->new( \s-1ALIASID \s0)" 4
.IX Item "$obj = Netscape::Bookmarks::Alias->new( ALIASID )"
Creates a new \f(CW\*(C`Netscape::Bookmarks::Alias\*(C'\fR object with the \s-1ALIASOF\s0
attribute value of \s-1ALIASID. \s0 This object relies on a corresponding
\&\f(CW\*(C`Netscape::Bookmarks::Link\*(C'\fR object with the same \s-1ALIASID,\s0 although
\&\f(CW\*(C`new\*(C'\fR does not check to see if that object exists (although it probably
should).
.ie n .IP "$obj\->\fIalias_of()\fR" 4
.el .IP "\f(CW$obj\fR\->\fIalias_of()\fR" 4
.IX Item "$obj->alias_of()"
Returns the alias key for this \f(CW\*(C`Netscape::Bookmarks::Alias\*(C'\fR object.
.ie n .IP "$obj\->target( \s-1ALIAS_KEY \s0)" 4
.el .IP "\f(CW$obj\fR\->target( \s-1ALIAS_KEY \s0)" 4
.IX Item "$obj->target( ALIAS_KEY )"
Returns the target Link of the given alias key.  The return value
is a \f(CW\*(C`Netscape::Bookmarks::Link\*(C'\fR object if the target exists, or
\&\f(CW\*(C`undef\*(C'\fR in scalar context or the empty list in list context if the
target does not exist. If you want to simply check to see if a
target exists, use \f(CW\*(C`target_exists\*(C'\fR.
.ie n .IP "add_target( $link_obj, \s-1ALIAS_KEY \s0)" 4
.el .IP "add_target( \f(CW$link_obj\fR, \s-1ALIAS_KEY \s0)" 4
.IX Item "add_target( $link_obj, ALIAS_KEY )"
Adds a target link for the given \s-1ALIAS_KEY.\s0 You can add target
links before the Alias is created.
.IP "target_exists( \s-1TARGET_KEY \s0)" 4
.IX Item "target_exists( TARGET_KEY )"
For the given target key returns \s-1TRUE\s0 or \s-1FALSE\s0 if the target
exists.
.ie n .IP "$obj\->\fIas_string()\fR" 4
.el .IP "\f(CW$obj\fR\->\fIas_string()\fR" 4
.IX Item "$obj->as_string()"
Returns a string representation on the alias.  This is
almost identical from the representation of the link which
is aliases except that the \s-1ALIASID\s0 attribute is changed
to the \s-1ALIASOF\s0 attribute.
.ie n .IP "$obj\->\fItitle()\fR" 4
.el .IP "\f(CW$obj\fR\->\fItitle()\fR" 4
.IX Item "$obj->title()"
Returns the tile of the Alias.
.ie n .IP "$obj\->\fIremove()\fR" 4
.el .IP "\f(CW$obj\fR\->\fIremove()\fR" 4
.IX Item "$obj->remove()"
Performs any clean up necessary to remove this object from the
Bookmarks tree. Although this method does not affect the Link object
which is its target, it probably should.
.SH "AUTHOR"
.IX Header "AUTHOR"
brian d foy \f(CW\*(C`<bdfoy@cpan.org>\*(C'\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2002\-2014, brian d foy, All rights reserved
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Netscape::Bookmarks, Netscape::Bookmarks::Link
