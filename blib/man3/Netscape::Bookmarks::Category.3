.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Netscape::Bookmarks::Category 3"
.TH Netscape::Bookmarks::Category 3 "2014-10-08" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Netscape::Bookmarks::Category	\- manipulate, or create Netscape Bookmarks files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Netscape::Bookmarks;
\&
\&  #parse an existing file
\&  my $bookmarks = new Netscape::Bookmarks $bookmarks_file;
\&
\&  #print a Netscape compatible file
\&  print $bookmarks\->as_string;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Netscape bookmarks file has several basic components:
.PP
.Vb 5
\&        title
\&        folders (henceforth called categories)
\&        links
\&        aliases
\&        separators
.Ve
.PP
On disk, Netscape browsers store this information in \s-1HTML.\s0 In the browser,
it is displayed under the \*(L"Bookmarks\*(R" menu.  The data can be manipulated
through the browser interface.
.PP
This module allows one to manipulate the bookmarks file programmatically.  One
can parse an existing bookmarks file, manipulate the information, and write it
as a bookmarks file again.  Furthermore, one can skip the parsing step to create
a new bookmarks file and write it in the proper format to be used by a Netscape
browser.
.PP
The Bookmarks.pm module simply parses the bookmarks file passed to it as the
only argument to the constructor:
.PP
.Vb 1
\&        my $bookmarks = new Netscape::Bookmarks $bookmarks_file;
.Ve
.PP
The returned object is a Netscape::Bookmarks::Category object, since the bookmark file is
simply a collection of categories that contain any of the components listed
above.  The top level (i.e. root) category is treated specially and defines the
title of the bookmarks file.
.SH "METHODS"
.IX Header "METHODS"
.IP "Netscape::Bookmarks::Category\->new( \e%hash )" 4
.IX Item "Netscape::Bookmarks::Category->new( %hash )"
The new method creates a Category.  It takes a hash reference
that specifies the properties of the category.  The valid keys
in that hash are
.Sp
.Vb 4
\&        folded                  collapsed state of the category ( 1 or 0 )
\&        title
\&        add_date
\&        description
.Ve
.ie n .IP "$category\->add( $object )" 4
.el .IP "\f(CW$category\fR\->add( \f(CW$object\fR )" 4
.IX Item "$category->add( $object )"
The \fIadd()\fR function adds an element to a category.  The element must be a Alias,
Link, Category, or Separator object.  Returns \s-1TRUE\s0 or \s-1FALSE.\s0
.ie n .IP "$category\->remove_element( $object )" 4
.el .IP "\f(CW$category\fR\->remove_element( \f(CW$object\fR )" 4
.IX Item "$category->remove_element( $object )"
Removes the given object from the Category by calling the object's
\&\fIremove()\fR method.
.Sp
Returns the number of objects removed from the Category.
.ie n .IP "$category\->\fIremove()\fR" 4
.el .IP "\f(CW$category\fR\->\fIremove()\fR" 4
.IX Item "$category->remove()"
Performs any clean up necessary to remove this object from the
Bookmarks tree. Although this method does not recursively remove
objects which it contains, it probably should.
.ie n .IP "$category\->title( [ \s-1TITLE \s0] )" 4
.el .IP "\f(CW$category\fR\->title( [ \s-1TITLE \s0] )" 4
.IX Item "$category->title( [ TITLE ] )"
Returns title to the category. With a
defined argument \s-1TITLE,\s0 it replaces the current
title.
.ie n .IP "$category\->\fIid()\fR" 4
.el .IP "\f(CW$category\fR\->\fIid()\fR" 4
.IX Item "$category->id()"
Returns the \s-1ID\s0 of the category. This is an arbitrary, unique number.
.ie n .IP "$category\->description( [ \s-1DESCRIPTION \s0] )" 4
.el .IP "\f(CW$category\fR\->description( [ \s-1DESCRIPTION \s0] )" 4
.IX Item "$category->description( [ DESCRIPTION ] )"
Returns the description of the category.  With a
defined argument \s-1DESCRIPTION,\s0 it replaces the current
description.
.ie n .IP "$category\->folded( $object )" 4
.el .IP "\f(CW$category\fR\->folded( \f(CW$object\fR )" 4
.IX Item "$category->folded( $object )"
Returns the folded state of the category (\s-1TRUE\s0 or \s-1FALSE\s0).  If the category is
\&\*(L"folded\*(R", Netscape shows a collapsed folder for this category.
.ie n .IP "$category\->\fIadd_date()\fR" 4
.el .IP "\f(CW$category\fR\->\fIadd_date()\fR" 4
.IX Item "$category->add_date()"
Returns the \s-1ADD_DATE\s0 attribute of the category.
.ie n .IP "$category\->\fIlast_modified()\fR" 4
.el .IP "\f(CW$category\fR\->\fIlast_modified()\fR" 4
.IX Item "$category->last_modified()"
Returns the \s-1LAST_MODIFIED\s0 attribute of the category.
.ie n .IP "$category\->\fIpersonal_toolbar_folder()\fR" 4
.el .IP "\f(CW$category\fR\->\fIpersonal_toolbar_folder()\fR" 4
.IX Item "$category->personal_toolbar_folder()"
Returns the \s-1PERSONAL_TOOLBAR_FOLDER\s0 attribute of the category.
.ie n .IP "$category\->\fIelements()\fR" 4
.el .IP "\f(CW$category\fR\->\fIelements()\fR" 4
.IX Item "$category->elements()"
In scalar context returns an array reference to the elements in
the category.  In list context returns a list of the elements in
the category.
.ie n .IP "$category\->\fIcount()\fR" 4
.el .IP "\f(CW$category\fR\->\fIcount()\fR" 4
.IX Item "$category->count()"
Returns a count of the number of objects in the Category.
.ie n .IP "$category\->\fIcategories()\fR" 4
.el .IP "\f(CW$category\fR\->\fIcategories()\fR" 4
.IX Item "$category->categories()"
Returns a list of the Category objects in the category.
.ie n .IP "$category\->\fIlinks()\fR" 4
.el .IP "\f(CW$category\fR\->\fIlinks()\fR" 4
.IX Item "$category->links()"
Returns a list of the Link objects in the category.
.ie n .IP "$category\->\fIas_headline()\fR" 4
.el .IP "\f(CW$category\fR\->\fIas_headline()\fR" 4
.IX Item "$category->as_headline()"
Returns an \s-1HTML\s0 string representation of the category, but not
the elements of the category.
.ie n .IP "$category\->recurse( \s-1CODE,\s0 [ \s-1LEVEL \s0] )" 4
.el .IP "\f(CW$category\fR\->recurse( \s-1CODE,\s0 [ \s-1LEVEL \s0] )" 4
.IX Item "$category->recurse( CODE, [ LEVEL ] )"
This method performs a depth-first traversal of the Bookmarks
tree and executes the \s-1CODE\s0 reference at each node.
.Sp
The \s-1CODE\s0 reference receives two arguments \- the object on which
it should operate and its level in the tree.
.ie n .IP "$category\->introduce( \s-1VISITOR,\s0 [ \s-1LEVEL \s0] )" 4
.el .IP "\f(CW$category\fR\->introduce( \s-1VISITOR,\s0 [ \s-1LEVEL \s0] )" 4
.IX Item "$category->introduce( VISITOR, [ LEVEL ] )"
This method performs a depth-first traversal of the Bookmarks
tree and introduces the visitor object to each object.
.Sp
This is different from \fIrecurse()\fR which only calls its
\&\s-1CODEREF\s0 on nodes.  The \s-1VISITOR\s0 operates on nodes and
vertices.  The \s-1VISITOR\s0 must have a \fIvisit()\fR method
recognizable by \fIcan()\fR.  This method does not trap
errors in the \s-1VISITOR.\s0
.Sp
See Netscape::Bookmarks::AcceptVisitor for details on
Visitors.
.ie n .IP "$category\->sort_elements( [ \s-1CODE \s0] )" 4
.el .IP "\f(CW$category\fR\->sort_elements( [ \s-1CODE \s0] )" 4
.IX Item "$category->sort_elements( [ CODE ] )"
Sorts the elements in the category using the provided \s-1CODE\s0
reference.  If you do not specify a \s-1CODE\s0 reference, the
elements are sorted by title (with the side effect of
removing Separators from the Category).
.Sp
This function does not recurse, although you can use
the \fIrecurse()\fR method to do that.
.Sp
Since the built-in \fIsort()\fR uses the package variables
\&\f(CW$a\fR and \f(CW$b\fR, your sort subroutine has to make sure
that it is accessing the right \f(CW$a\fR and \f(CW$b\fR, which
are the ones in the package \f(CW\*(C`Netscape::Bookmarks::Category\*(C'\fR.
You can start your \s-1CODE\s0 reference with a package
declaration to ensure the right thing happens:
.Sp
.Vb 2
\&        my $sub = sub {
\&                package Netscape::Bookmarks::Category;
\&
\&                $b\->title cmp $a\->title;
\&                };
\&
\&        $category\->sort_elements( $sub );
.Ve
.Sp
If you know a better way to do this, please let me know. :)
.ie n .IP "$category\->\fIas_string()\fR" 4
.el .IP "\f(CW$category\fR\->\fIas_string()\fR" 4
.IX Item "$category->as_string()"
Returns an \s-1HTML\s0 string representation of the category as the
top level category, along with all of the elements of the
category and the Categories that it contains, recursively.
.ie n .IP "$obj\->write_file( \s-1FILENAME \s0)" 4
.el .IP "\f(CW$obj\fR\->write_file( \s-1FILENAME \s0)" 4
.IX Item "$obj->write_file( FILENAME )"
\&\s-1UNIMPLEMENTED\s0!
.SH "AUTHOR"
.IX Header "AUTHOR"
brian d foy \f(CW\*(C`<bdfoy@cpan.org>\*(C'\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2002\-2014, brian d foy, All rights reserved
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Netscape::Bookmarks
